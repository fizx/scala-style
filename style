#!/usr/bin/env ruby

class Array
  def yoink!(&block)
    yoinked = select(&block)
    reject!(&block)
    yoinked
  end
end

class String
  def package_base
    self[/import (.+)\.(.+?)/, 1]
  end
  
  def import
    self[/import (.+)/, 1]
  end
end

while name = STDIN.gets
  name.strip!
  if name =~ /scala$/
    lines = File.open(name).map(&:chomp)
     

    packages = lines.yoink!{|line| line =~ /^package\b/ }   
    javas = lines.yoink!{|line| line =~ /^import\s+java\b/ }.sort.uniq
    scalas = lines.yoink!{|line| line =~ /^import\s+scala\b/ }.sort.uniq
    
    imports = lines.yoink!{|line| line =~ /^import\b/ }.sort.uniq
    
    package_name = packages.first && packages.first[/package\s+(.*)/, 1]
    
    # Attempt to reify relative imports
    imports.each_with_index {|line, i| 
      unless %w[com org net].include?(line[/^import\s+(\w+)/, 1])
        no = packages.length + javas.length + scalas.length + 4 + i
        STDERR.puts "\033[33mWARN: #{name}##{no}: Relative import: #{line.import}\033[0m"
        imports[i] = line.gsub(/import /, "import #{package_name}.") if package_name
      end
    }
    
    # Attempt to roll up entries duplicated by a wildcard entry
    wildcards = imports.select{|line| line =~ /_$/ }
    set = wildcards.inject({}) { |hash, line|
      hash[line.package_base] = true
      hash
    }
        
    other = imports.reject{|line| line =~ /_$/ }
    
    other.reject! {|line|
      if set[line.package_base] 
        STDERR.puts "\033[33mWARN: #{name}: #{line.import} is covered by wildcard\033[0m"
        true
      end
    }
      
    imports = (wildcards + other).sort.uniq
    
    lines = packages + [""] + javas + [""] + scalas + [""] + imports + [""] + lines
    content = lines.join("\n")
    File.open(name, "w") {|f| f.puts content.gsub(/[ \t]+\n/, "\n").gsub(/\n{3,}/, "\n\n" ) }
  end
end